; Each new term in the Fibonacci sequence is generated by adding
; the previous two terms. By starting with 1 and 2, the first 10
; terms will be:
;
; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;
; By considering the terms in the Fibonacci sequence whose values
; do not exceed four million, find the sum of the even-valued terms.

; 1+2+3+5+8 = 19
; 1+2+3+4+5 = 15

(prn "Problem 2")

;(->>
;  (concat `(1 2) `(3 4))
;  (prn))
;
;(->>
;  (concat `(1 4) (conj `() 5))
;  (prn))

;(dotimes [n 5]
;  (->>
;    (concat `(1 4) (conj `() 5))
;    (prn)
;    ))

;(->>
;  (range 10)
;  (map inc)
;  (map + first)
;  (prn)
;  )

; This works... BUT IS VERY UGLY. TODO refactor
(prn (nth (last
            (loop [sum (conj `() `(2 2 0) `(2 1 0) `(0 1 1)) cnt 3]
              (if (or (= cnt 40) (> (second (last sum)) 4000000))
                sum
                (recur
                  (concat sum
                    (conj `()
                      (conj `()
                        ; use the third value as our sum total
                        (if (even? (second (nth sum (- cnt 1)))) ; check if previous middle value was even
                          (+
                            (nth
                              (nth sum (- cnt 1)) 2) ; here we need to take increase sum
                            (nth
                              (nth sum (- cnt 1)) 1) ; here we need to take increase sum
                            )
                          (nth
                            (nth sum (- cnt 1)) 2)) ; otherwise take the previous one
                        (+ ; set the second value as the new n
                          (second
                            (nth sum (- cnt 1))) ; n - 1 middle value
                          (second
                            (nth sum (- cnt 2)))) ; n - 2 middle value
                        (second ; set the first value as the new n-1
                          (nth sum (- cnt 2))) ; n - 2 middle value
                        )))
                  (inc cnt)
                  )))
            ) 2))